@startuml
participant App
participant ReduxTokenAuth


App -> ReduxTokenAuth: login(credentials)
ReduxTokenAuth -->]: authenticate(credentials)
ReduxTokenAuth <--]: { user, tokens }

...

App -> ReduxTokenAuth: authUser(state)
ReduxTokenAuth -> App: user

... requestFn wrapped handler calls ...

App -> ReduxTokenAuth: authorizedFn(handler)
alt OK
note over ReduxTokenAuth: The handler succeeds
ReduxTokenAuth -->] :handler({ user, ...tokens })
ReduxTokenAuth <--] :[result]
App <-- ReduxTokenAuth :[result]
else
note over ReduxTokenAuth: The handler throws an error
ReduxTokenAuth -->x] :handler({ user, ...tokens })
ReduxTokenAuth -->] : refreshTokens(tokens)
ReduxTokenAuth <--] : newTokens
alt OK
note over ReduxTokenAuth: The retry with new tokens
ReduxTokenAuth -->] :handler({ user, ...newTokens })
ReduxTokenAuth <--] :[result]
App <-- ReduxTokenAuth :[result]
else
note over ReduxTokenAuth: The retry failure -> logout
ReduxTokenAuth -->x] :handler({ user, ...newTokens })
ReduxTokenAuth --> ReduxTokenAuth: logout()

end

end


@enduml